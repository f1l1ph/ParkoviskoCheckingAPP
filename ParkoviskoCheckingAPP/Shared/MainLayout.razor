@inherits LayoutComponentBase
@using ParkoviskoCheckingAPP.Shared;
@using ParkoviskoCheckingAPP.services;
@inject AuthentificationService service
@using ParkoviskoCheckingAPP.Data
@using System.Runtime.InteropServices

<div class="page">
    @if(authentificated != true)
    {
        <div class="login-container">
            @if (haveInternet)
            {
                <p style="color:#00ff00">I have internet</p>
            }
            else
            {
                <p>error, no internet</p>
            }

            @if(authentificated == false && triedLogin == true)
            {
                <p> <em>wrong username or password, sorry</em></p>
            }

            <h1>Login</h1>

            <div class="form-group">
                <label for="username">Username:</label>
                <input id="username" @bind="username" class="form-control" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" @bind="password" class="form-control" />
            </div>

            <button class="btn btn-primary" @onclick="Login">Login</button>

            <div style=" display: flex; align-items: center; margin-top:5px;">
                <p for="myCheckbox" style="margin-right: 7px; ">Remember me</p>
                <input type="checkbox" id="myCheckbox" @bind="isChecked" style="width: 20px; height: 20px; vertical-align: middle;" />
            </div>
        </div>
    }

    @if (authentificated != false)
    {
        <div class="sidebar">
            <NavMenu/>
        </div>

        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    }
</div>

@code{
    bool isChecked = false;
    string isCheckedKey = "Checked";

    string userNameKey = "Username";
    string passwordKey = "Password";

    NetworkAccess accessType = Connectivity.Current.NetworkAccess;
    bool haveInternet = false;

    private string username;
    private string password;

    bool authentificated = false;
    bool triedLogin = false;

    private async Task Login()
    {
        LoginModel model = new LoginModel { UserName = username, Email = "", Password = password };
        authentificated = await service.Login(model);
        triedLogin = true;

        if(isChecked == true)
        {
            await SaveLoginParamas(username, password);
            await SecureStorage.SetAsync(isCheckedKey, "true");
        }
        else
        {
            await SecureStorage.SetAsync(isCheckedKey, "false");
        }
    }

    private async Task SaveLoginParamas(string userName_, string password_)
    {
        await SecureStorage.SetAsync(userNameKey, userName_);
        await SecureStorage.SetAsync(passwordKey, password_);
    }

    private async Task LoginParam(string userName_, string password_)
    {
        LoginModel model = new LoginModel { UserName = userName_, Email = "", Password = password_ };
        authentificated = await service.Login(model);

        triedLogin = true;
    }

    protected override async Task OnInitializedAsync()
    {
        if (accessType == NetworkAccess.Internet)
        {
            haveInternet = true;
        }

        if (await SecureStorage.GetAsync(isCheckedKey) != "false")
        {
            //start animation here

            var name_ = await SecureStorage.GetAsync(userNameKey);
            var password_ = await SecureStorage.GetAsync(passwordKey);

            await LoginParam(name_, password_);
        }
    }
}

<style>
    .login-container {
        max-width: 400px;
        margin: 20px auto;
        padding: 20px;
        border: 2px solid #555;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        background-color: #333;
        color:#fff;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 95vh; /* Set height to 100% of the viewport height */
        width: 100vh;
    }

    .form-group {
        margin-bottom: 15px;
        width: 100%; /* Ensure the form groups take up the full width */
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #555;
        background-color:#444;
        color:#fff;
        border-radius: 3px;
    }

    .btn {
        display: inline-block;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        border: 1px solid #3498db;
        border-radius: 3px;
        color: #fff;
        background-color: #3498db;
    }

    .btn:hover {
        background-color: #2980b9;
        border-color: #2980b9;
    }
</style>

@if (DeviceInfo.Current.Idiom == DeviceIdiom.Phone)
{
    <style>
        .login-container {
        max-width: 100%; /* Full width for smaller screens */
        max-height:110%;
        height:100vh;
        margin:0;
        }

        .form-control {
        width: calc(100% - 16px); /* Adjust input width for smaller screens */
        }
    </style>
}