@page "/ViewCars"

@using ParkoviskoCheckingAPP.Data
@inject CarService _carService
@using ParkoviskoCheckingAPP.Components
@using ParkoviskoCheckingAPP.services

<button class="btn btn-primary" @onclick="Refresh">Obnov autá</button>

@if (!haveInternet)
{
    <p style="color: red;">Nemám internet ): </p>
}


<div class="centered">
    @if (cars == null || cars.Count == 0)
    {
        @if (cars != null && cars.Count == 0)
        {
            <p><em>Nenašiel som žiadne autá</em></p>
        }
        else
        {
            @if(cars == null && haveRefreshed)
            {
                <p>Žiadne autá</p>
            }
            else
            {
                <div class="loader"></div>
            }
        }
    }
    else
    {
        @if (editing == false)
        {
            <div class="card-container">
                @foreach (var car_ in DisplayedCars)
                {
                    <CarCard car="car_" Refresh="Refresh" Edit="EditCar" />
                }
            </div>
        }
        @if (editing == true)
        {
            <EditCarComponent car="carToEdit" Refresh="Refresh" />
        }
    }
</div>

<div class="centered">
    <button class="btn btn-primary" disabled="@IsFirstPage" @onclick="GoToPreviousPage">Naspäť</button>
    <span>Strana @_currentPage z @TotalPages</span>
    <button class="btn btn-primary" disabled="@IsLastPage" @onclick="GoToNextPage">Ďalej</button>
</div>

@code {
    bool editing;
    public Car carToEdit;

    //check for internet connection
    NetworkAccess accessType = Connectivity.Current.NetworkAccess;
    bool haveInternet;

    private List<Car> cars;
    bool haveRefreshed;

    //pagination
    private int _currentPage = 1;
    private const int ItemsPerPage = 20;
    private List<Car> DisplayedCars;
    private int TotalPages;
    private bool IsFirstPage;
    private bool IsLastPage;


    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        haveInternet = (accessType == NetworkAccess.Internet);
    }

    async Task Refresh()
    {
        cars = await _carService.GetCarsAsync();
        haveRefreshed = true;
        editing = false;

        _currentPage = 1;
        DisplayedCars = cars.Skip((_currentPage - 1) * ItemsPerPage).Take(ItemsPerPage).ToList();
        TotalPages = (int)Math.Ceiling((double)cars.Count / ItemsPerPage);
        IsFirstPage = _currentPage == 1;
        IsLastPage = _currentPage == TotalPages;
    }

    async Task EditCar(int carID)
    {
        editing = true;
        carToEdit = await _carService.GetCarAsync(carID);
    }

    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            _currentPage++;

            DisplayedCars = cars.Skip((_currentPage - 1) * ItemsPerPage).Take(ItemsPerPage).ToList();
            IsFirstPage = _currentPage == 1;
            IsLastPage = _currentPage == TotalPages;

        }
    }

    private void GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            _currentPage--;

            DisplayedCars = cars.Skip((_currentPage - 1) * ItemsPerPage).Take(ItemsPerPage).ToList();
            IsFirstPage = _currentPage == 1;
            IsLastPage = _currentPage == TotalPages;
        }
    }
}

<style>

    .centered {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .loader{
            width: 100px;
            height: 100px;
    }
</style>