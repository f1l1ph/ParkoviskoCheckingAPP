@using ParkoviskoCheckingAPP.Data;
@using ParkoviskoCheckingAPP.Components
@using ParkoviskoCheckingAPP.services
@using ParkoviskoCheckingAPP.Validations
@inject CarService _carService
@inject ValidationHelper ValidationHelper

@page "/lpr"

@if (editing)
{
    <EditCarComponent car="car" Refresh="OnDelete" />
}
else
{
    <div class="custom_div">
        <div>
            <label for="licensePlate">Zadaj ŠPZ:</label>
            @if (invalidPlate)
            {
                <label style="color:red;">Neplatná Špz</label>
            }
            <input type="text" @bind="plate" id="plate"/>
        </div>
        <br />
        <button class="btn btn-primary" @onclick="FindCar">Skontroluj ŠPZ</button>
    </div>

    <div class="card-container">
        @if (car != null)
        {
            <CarCard car="car" Refresh="OnDelete" Edit="OnEdit"/>
        }

        @if (car == null && triedToFind == true)
        {
            <p>I am sorry but this car does not exist</p>
        }
    </div>
}

@code {
    bool editing;
    Car car;
    string plate;
    bool triedToFind;

    bool invalidPlate;

    async Task FindCar()
    {
        if (string.IsNullOrEmpty(plate)) { return; }

        if (!ValidationHelper.ValidateLicensePlate(plate))
        {
            invalidPlate = true;
            return;
        }
        invalidPlate = false;

        car = await _carService.GetCarByPlateAsync(plate);
        triedToFind = true;
    }

    void OnDelete()
    {
        plate = string.Empty;
        triedToFind = false;
        car = null;
        editing = false;
    }

    void OnEdit()
    {
        editing = true;
    }
}

<style>
    .custom_div {
        max-width: 400px;
        margin: 0 auto;
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
    }

    .card-container{
        justify-content: center;
        align-items: center;
    }

</style>